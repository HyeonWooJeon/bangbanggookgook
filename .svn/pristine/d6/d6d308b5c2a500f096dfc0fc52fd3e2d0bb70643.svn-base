package com.care.KorTravel.controller;

import java.util.ArrayList;
import java.util.HashMap;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.ParseException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.care.KorTravel.dao.RouteDAO;
import com.care.KorTravel.dto.FacilityDTO;
import com.care.KorTravel.service.RouteServiceImpl;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;

@Controller
public class RouteController {
	
	@Autowired RouteDAO dao;
	@Autowired private RouteServiceImpl svc;
	
	@RequestMapping("route")
	public String route(Model model) {
		// 저장된 일정이 있는지 없는지만 확인하는 과정으로 수정해야 한다.
		model.addAttribute("calendar", svc.getCalendar());
		return "route/route";
	}
	
//	@Autowired
//	private IRouteService routeService;
	
	@ResponseBody
	@PostMapping(value = "getSpecPlace", produces = "application/json; charset = UTF-8")
	public String getAllPlace(@RequestBody(required = false)HashMap<String, String>datas) {
		// neLat, neLng, swLat, swLng
		if (datas.get("cat") == null)
			return "x";
		
		return svc.getSpecPlace(datas);
	}
	
	
	@ResponseBody
	@PostMapping("route/getFood")
	public String getFood(Model model) {
		model.addAttribute("Food", dao.getFood());
		return "route/route";
	}

	// 우측 검색결과
	@ResponseBody
	@PostMapping(value = "route/searchInDate", produces = "text/html; charset = UTF-8")
	public String search(@RequestBody(required = false)String searchText) throws ParseException {
		ArrayList<FacilityDTO> returnData = svc.getSearchResult(searchText);
		
		JSONObject obj = new JSONObject();
		JSONArray ja = new JSONArray();
		
		for (int cnt = 0; cnt < returnData.size(); cnt++) {
			JSONObject tmp = new JSONObject();
			tmp.put("title", returnData.get(cnt).getTitle());
			tmp.put("addr1", returnData.get(cnt).getAddr1());
			tmp.put("addr2", returnData.get(cnt).getAddr2());
			tmp.put("tel", returnData.get(cnt).getTel());
			tmp.put("cat1", returnData.get(cnt).getCat1());
			tmp.put("mapX", returnData.get(cnt).getMapX());
			tmp.put("mapY", returnData.get(cnt).getMapY());
			tmp.put("firstImage2", returnData.get(cnt).getFirstImage2());
			tmp.put("contentId", returnData.get(cnt).getContentId());
			tmp.put("recommend", returnData.get(cnt).getRecommend());
			ja.add(tmp);
		}
		
		
		obj.put("items", ja);
		return obj.toJSONString();
	}
	
	// 추천장소 클릭시
	@ResponseBody
	@PostMapping(value = "route/recommendFacility", produces = "text/html; charset = UTF-8")
	public String setRecommendFacilities() {
		ArrayList<FacilityDTO> returnData = svc.getRecommendFacilities();

		JSONObject obj = new JSONObject();
		JSONArray ja = new JSONArray();

		for (int cnt = 0; cnt < returnData.size(); cnt++) {
			JSONObject tmp = new JSONObject();
			tmp.put("title", returnData.get(cnt).getTitle());
			tmp.put("addr1", returnData.get(cnt).getAddr1());
			tmp.put("addr2", returnData.get(cnt).getAddr2());
			tmp.put("tel", returnData.get(cnt).getTel());
			tmp.put("cat1", returnData.get(cnt).getCat1());
			tmp.put("mapX", returnData.get(cnt).getMapX());
			tmp.put("mapY", returnData.get(cnt).getMapY());
			tmp.put("firstImage2", returnData.get(cnt).getFirstImage2());
			tmp.put("contentId", returnData.get(cnt).getContentId());
			tmp.put("recommend", returnData.get(cnt).getRecommend());
			ja.add(tmp);
		}

		obj.put("items", ja);
		return obj.toString();
	}
	
	// 일정저장
	@ResponseBody
	@PostMapping(value = "saveCalendar", produces = "application/json; charset=UTF-8")
	public void saveCalendar(@RequestBody(required = false)String obj) throws ParseException {
		
		Gson gson = new Gson();
		JsonObject jo = gson.fromJson(obj, JsonObject.class);
		JsonElement je = jo.get("item");
		JsonArray ja = je.getAsJsonArray();
		
		ArrayList<FacilityDTO> saveCalendar = new ArrayList<>();
		for (int cnt = 0; cnt < ja.size(); cnt++) {
			FacilityDTO facility = new FacilityDTO();
			JsonObject o = ja.get(cnt).getAsJsonObject();
			facility.setTitle(o.get("title").getAsString());
			facility.setAddr1(o.get("addr1").getAsString());
			facility.setAddr2(o.get("addr2").getAsString());
			facility.setFirstImage2(o.get("firstImage2").getAsString());
			facility.setMapX(o.get("mapX").getAsString());
			facility.setMapY(o.get("mapY").getAsString());
			facility.setContentId(o.get("contentId").getAsString());
			saveCalendar.add(facility);
		}
		
		svc.saveCalendar(saveCalendar);
	}
	
	// 일정 불러오기
	@ResponseBody
	@PostMapping(value = "getCalendar", produces = "application/json; charset=UTF-8")
	public String getCalendar(@RequestBody(required = false)String id, Model model) {
		ArrayList<FacilityDTO> returnData = svc.getCalendar();
		
		JSONObject jo = new JSONObject();
		JSONArray ja = new JSONArray();
		
		for (int cnt = 0; cnt < returnData.size(); cnt++) {
			JSONObject tmp = new JSONObject();
			tmp.put("title", returnData.get(cnt).getTitle());
			tmp.put("addr1", returnData.get(cnt).getAddr1());
			tmp.put("addr2", returnData.get(cnt).getAddr2());
			tmp.put("mapX", returnData.get(cnt).getMapX());
			tmp.put("mapY", returnData.get(cnt).getMapY());
			tmp.put("firstImage2", returnData.get(cnt).getFirstImage2());
			tmp.put("contentId", returnData.get(cnt).getContentId());
			ja.add(tmp);
		}
		jo.put("items", ja);
		return jo.toString();
	}
}
